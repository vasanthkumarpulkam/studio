/**
 * @file Firestore Security Rules for HandyConnect Platform
 * @version Prototyping Mode - Authorization Focused
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and a public-read, owner-write model for job posts. It also enforces ownership
 * for bids within a job post, payments, and reviews. Data shape validation is relaxed
 * for rapid prototyping.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles.
 * - /job_posts/{jobPostId}: Stores job postings.
 * - /job_posts/{jobPostId}/bids/{bidId}: Stores bids for a specific job.
 * - /payments/{paymentId}: Stores payment transaction records.
 * - /reviews/{reviewId}: Stores all reviews.
 *
 * @key_security_decisions
 * - Users can only read and write their own profile data. Listing all users is denied.
 * - Job posts are publicly readable but only the owner can create, update, or delete.
 * - Bids are owned by the provider and scoped to a specific job post.
 * - Payments are owner-writable
 * - Reviews are owner-writable.
 *
 * @denormalization_for_authorization
 *   - JobPost documents require a `userId` field to identify the owner.
 *   - Bid documents require a `providerId` field to identify the owner.
 *   - Payment documents require `userId` and `providerId` fields.
 *   - Review documents require `reviewerId` and `revieweeId` fields.
 *
 * @structural_segregation
 *   - Private user data is stored under /users/{userId}, separate from public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only signed-in users can attempt to create/modify user documents.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // prevent listing all users
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to job post data. Job posts are publicly readable, but
     *              only the owner can create, update, or delete them.
     * @path /job_posts/{jobPostId}
     * @allow (get) Any user can read a job post.
     * @allow (list) Any user can list job posts.
     * @allow (create) User with UID 'user123' can create a job post with userId 'user123'.
     * @allow (update) User with UID 'user123' can update their job post.
     * @allow (delete) User with UID 'user123' can delete their job post.
     * @deny (create) User with UID 'user456' cannot create a job post with userId 'user123'.
     * @principle Allows public reads and enforces document ownership for writes.
     */
    match /job_posts/{jobPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to bids submitted for a specific job post.
     *              Only the provider who created the bid can manage it.
     * @path /job_posts/{jobPostId}/bids/{bidId}
     * @allow (create) Provider 'provider456' can create a bid for job 'job123' with providerId 'provider456'.
     * @allow (get) Provider 'provider456' can read their own bid.
     * @allow (update) Provider 'provider456' can update their own bid.
     * @allow (delete) Provider 'provider456' can delete their own bid.
     * @deny (create) Provider 'provider789' cannot create a bid for providerId 'provider456'.
     * @principle Enforces document ownership for writes within a subcollection.
     */
    match /job_posts/{jobPostId}/bids/{bidId} {
      allow get: if isSignedIn() && isBidOwner(resource.data.providerId);
      allow list: if isSignedIn() && isBidOwner(resource.data.providerId);
      allow create: if isSignedIn() && request.resource.data.providerId == request.auth.uid;
      allow update: if isSignedIn() && isBidOwner(resource.data.providerId) && resource != null;
      allow delete: if isSignedIn() && isBidOwner(resource.data.providerId) && resource != null;
    }

    /**
     * @description Controls access to payment transaction records.
     *              Payments are accessible to the user or provider associated with the payment.
     * @path /payments/{paymentId}
     * @allow (create) User 'user123' can create a payment record with userId 'user123'.
     * @allow (get) User 'user123' can read a payment record associated with them.
     * @allow (update) User 'user123' can update a payment record associated with them.
     * @allow (delete) User 'user123' can delete a payment record associated with them.
     * @deny (create) User 'user456' cannot create a payment record with userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /payments/{paymentId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(resource.data.providerId));
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.userId == request.auth.uid || request.resource.data.providerId == request.auth.uid);
      allow update: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(resource.data.providerId)) && resource != null;
      allow delete: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(resource.data.providerId)) && resource != null;
    }

    /**
     * @description Controls access to reviews.
     *              Reviews are accessible to reviewer and reviewee.
     * @path /reviews/{reviewId}
     * @allow (create) User 'user123' can create a review with reviewerId 'user123'.
     * @allow (get) User 'user123' can read a review where they are the reviewer or reviewee.
     * @allow (update) User 'user123' can update a review where they are the reviewer.
     * @allow (delete) User 'user123' can delete a review where they are the reviewer.
     * @deny (create) User 'user456' cannot create a review with reviewerId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /reviews/{reviewId} {
      allow get: if isSignedIn() && (isOwner(resource.data.reviewerId) || isOwner(resource.data.revieweeId));
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.reviewerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.reviewerId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.reviewerId) && resource != null;
    }

    // --- Helper functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isBidOwner(providerId) {
      return request.auth.uid == providerId;
    }
  }
}