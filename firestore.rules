/**
 * @file Firestore Security Rules for HandyConnect
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user profiles and job posts,
 * with public read access to job posts. Bids are secured under their respective job posts,
 * accessible only to the job poster and the bidder. Payments are globally accessible.
 * Reviews are globally accessible.
 *
 * @data_structure
 * - /users/{userId}: User profiles, owned by the user.
 * - /job_posts/{jobPostId}: Job postings, publicly readable, owner-writable.
 * - /job_posts/{jobPostId}/bids/{bidId}: Bids for job posts, restricted access.
 * - /payments/{paymentId}: Payment records.
 * - /reviews/{reviewId}: Review records.
 *
 * @key_security_decisions
 * - User listing is disallowed for privacy.
 * - Job posts are publicly readable to maximize visibility.
 * - Payments and Reviews are globally accessible
 *
 * @denormalization_for_authorization
 * - Job posts must contain a `userId` field to identify the owner.
 *
 * @structural_segregation
 * - No structural segregation is applied in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' creates their own profile at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' reads/writes their profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' attempts to create a profile for /users/user_xyz.
     * @deny (get, update, delete) User with UID 'user_abc' attempts to read/write profile /users/user_xyz.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects job postings. Anyone can read, but only the owner can create, update, or delete.
     * @path /job_posts/{jobPostId}
     * @allow (get, list) Any user can read any job post.
     * @allow (create) User with UID 'user_abc' creates a job post with userId: 'user_abc'.
     * @allow (update, delete) User with UID 'user_abc' updates/deletes a job post with userId: 'user_abc'.
     * @deny (create) User with UID 'user_abc' creates a job post with userId: 'user_xyz'.
     * @deny (update, delete) User with UID 'user_abc' updates/deletes a job post with userId: 'user_xyz'.
     * @principle Allows public read access with owner-only write access.
     */
    match /job_posts/{jobPostId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      function isCreatingOwner() {
        return request.auth != null && request.auth.uid == request.resource.data.userId;
      }

      allow get, list: if true;
      allow create: if isCreatingOwner();
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Protects bids for job postings. Only the job poster and the bidder can access.
     * @path /job_posts/{jobPostId}/bids/{bidId}
     * @allow (create) User with UID 'provider_abc' creates a bid with providerId: 'provider_abc' under job post 'job_123'.
     * @allow (get, list) User with UID 'customer_xyz' (owner of job post 'job_123') can read bids under job post 'job_123'.
     * @allow (get, list) User with UID 'provider_abc' (bidder) can read their own bid under job post 'job_123'.
     * @deny (get, list) User with UID 'malicious' tries to list bids under job post 'job_123' without being the job owner or bidder.
     * @deny (create) User with UID 'provider_abc' creates a bid with providerId: 'another_provider' under job post 'job_123'.
     * @principle Enforces shared access (job poster and bidder).
     */
    match /job_posts/{jobPostId}/bids/{bidId} {
      function isJobOwner(jobPostId) {
        return request.auth != null && get(/databases/$(database)/documents/job_posts/$(jobPostId)).data.userId == request.auth.uid;
      }

      function isBidOwner() {
        return request.auth != null && resource.data.providerId == request.auth.uid;
      }

      function isCreatingBidOwner() {
        return request.auth != null && request.resource.data.providerId == request.auth.uid;
      }

      allow get: if request.auth != null && (isJobOwner(jobPostId) || isBidOwner());
      allow list: if request.auth != null && isJobOwner(jobPostId);
      allow create: if isCreatingBidOwner();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows read and write access to the payments collection.
      * @path /payments/{paymentId}
      * @allow (get, list, create, update, delete) Any authenticated user can perform any operation.
      * @principle Open access for prototyping.
      */
     match /payments/{paymentId} {
        allow get, list, create, update, delete: if true;
     }

      /**
       * @description Allows read and write access to the reviews collection.
       * @path /reviews/{reviewId}
       * @allow (get, list, create, update, delete) Any authenticated user can perform any operation.
       * @principle Open access for prototyping.
       */
    match /reviews/{reviewId} {
        allow get, list, create, update, delete: if true;
    }
  }
}