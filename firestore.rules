/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *   allowing users to manage their profiles and job posts. Public read access
 *   is granted to job posts to facilitate discovery. All write operations
 *   are protected by authorization checks to ensure data integrity and prevent
 *   unauthorized modifications.
 *
 * @dataStructure
 *   - /users/{userId}: Stores user profile information.
 *   - /job_posts/{jobPostId}: Stores job post details.
 *   - /job_posts/{jobPostId}/bids/{bidId}: Stores bids for each job post.
 *   - /payments/{paymentId}: Stores payment transaction records.
 *   - /reviews/{reviewId}: Stores reviews for jobs.
 *
 * @keySecurityDecisions
 *   - Users can only read/write their own user document.
 *   - Job posts are publicly readable but writable only by the owner.
 *   - Bids are writable only by the provider who created them.
 *   - Payments can only be created.
 *   - Reviews can only be created.
 *   - Listing of users is disallowed.
 *   - Role based authorization is not enforced.
 *
 * @denormalizationForAuthorization
 *   - JobPost documents must contain a `userId` field to denote ownership.
 *   - Bid documents must contain `providerId` and `jobPostId` fields.
 *   - Payment documents must contain `userId` and `providerId` and `jobPostId` fields.
 *   - Review documents must contain `reviewerId` and `revieweeId` and `jobPostId` fields.
 *
 * @structuralSegregation
 *   - No explicit segregation between public and private data is used, other than
 *     the public read access to the /job_posts collection. If draft/published
 *     states were required for job posts, separate subcollections would be preferable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can access their document.
     * @allow (create) User can create their own document if the UID matches.
     * @deny (get, update, delete) User cannot access another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read job posts, but only the owner can modify them.
     * @path /job_posts/{jobPostId}
     * @allow (get, list) Any user can read any job post.
     * @allow (create) User can create a job post if the userId matches.
     * @allow (update, delete) Only the owner can update/delete their job post.
     * @deny (create) User cannot create a job post for another user.
     * @deny (update, delete) User cannot modify/delete another user's job post.
     * @principle Enables public read access while restricting write access to the owner.
     */
    match /job_posts/{jobPostId} {
      function isOwner() {
        return request.auth != null && resource.data.userId == request.auth.uid;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Allows a provider to create, read, update, and delete their own bids under a job post.
     * @path /job_posts/{jobPostId}/bids/{bidId}
     * @allow (get, list) Anyone can read bids.
     * @allow (create) A provider can create a bid if their ID matches.
     * @allow (update, delete) Only the provider can update/delete their bid.
     * @deny (create) User cannot create a bid for another provider.
     * @deny (update, delete) User cannot modify/delete another provider's bid.
     * @principle Restricts bid management to the creating provider.
     */
    match /job_posts/{jobPostId}/bids/{bidId} {
      function isOwner() {
        return request.auth != null && resource.data.providerId == request.auth.uid;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.providerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Allows creation of payment records.
     * @path /payments/{paymentId}
     * @allow (create) Any authenticated user can create a payment record.
     * @deny (get, list, update, delete) All other operations are denied.
     * @principle Only creation is permitted.
     */
    match /payments/{paymentId} {
      function isSignedIn() {
          return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows creation of review records.
     * @path /reviews/{reviewId}
     * @allow (create) Any authenticated user can create a review record.
     * @deny (get, list, update, delete) All other operations are denied.
     */
    match /reviews/{reviewId} {
      function isSignedIn() {
          return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read notifications.
     * @path /notifications
     * @allow (get, list) Any user can read any notification.
     * @deny (create, update, delete) No write operation are permitted
     * @principle Enables public read access.
     */
    match /notifications/{notificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}