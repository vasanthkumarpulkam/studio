rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }
    function isOwner(uid) { return signedIn() && request.auth.uid == uid; }
    function isAdmin() {
      return signedIn() && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.since != null;
    }

    // USERS - public profiles readable, self-manageable
    match /users/{userId} {
      allow get: if true; // public profile readable
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update, delete: if isOwner(userId);
    }

    // JOBS (stored as job_posts in this codebase)
    match /job_posts/{jobId} {
      allow get, list: if true;
      allow create: if signedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update, delete: if signedIn() && resource.data.postedBy == request.auth.uid;

      // BIDS subcollection - private to job poster and bidder
      match /bids/{bidId} {
        allow create: if signedIn() && request.resource.data.providerId == request.auth.uid;
        allow get: if signedIn() && (
          // bidder can read their bid
          resource.data.providerId == request.auth.uid ||
          // job poster can read bids for their job
          get(/databases/$(database)/documents/job_posts/$(jobId)).data.postedBy == request.auth.uid
        );
        allow list: if false; // require targeted queries
        allow update, delete: if false; // immutable; changes via server functions later
      }
    }

    // CHATS - current model stores messages as top-level docs with jobId/providerId/senderId
    match /chats/{messageId} {
      allow create: if signedIn() && request.resource.data.senderId == request.auth.uid;
      allow get: if signedIn() && (
        resource.data.senderId == request.auth.uid ||
        // poster of the job
        get(/databases/$(database)/documents/job_posts/$(resource.data.jobId)).data.postedBy == request.auth.uid ||
        // awarded provider (we cannot check award here reliably without extra data; allow providerId)
        resource.data.providerId == request.auth.uid
      );
      allow list: if false;
      allow update, delete: if false;
    }

    // ADMINS - role-gated
    match /admins/{uid} {
      allow get, list, create, update, delete: if isAdmin();
    }

    // NOTIFICATIONS - only owner can list/get their notifications
    match /notifications/{notificationId} {
      allow get, update: if signedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create, delete: if false;
    }

    // PAYMENTS/REVIEWS - placeholder, locked down for now
    match /payments/{paymentId} { allow read: if false; allow write: if false; }
    match /reviews/{reviewId} { allow read: if true; allow write: if false; }
  }
}