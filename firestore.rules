/**
 * @fileoverview Firestore Security Rules for HandyConnect.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a creator-ownership model for job posts and bids.
 * It prioritizes security by default, explicitly denying access where authorization is not clearly defined.
 * Data validation is limited to relational integrity checks for prototyping speed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /job_posts/{jobPostId}: Stores job postings, accessible for read by anyone, but create, update, and delete are restricted to the user who created the job.
 * - /job_posts/{jobPostId}/bids/{bidId}: Stores bids for specific job posts, accessible for read by anyone, but create, update, and delete are restricted to the provider who created the bid.
 * - /payments/{paymentId}: Stores payment transactions, write operations are denied, assuming payments are handled via backend functions only.
 * - /reviews/{reviewId}: Stores reviews, write operations are denied, assuming reviews are handled via backend functions only.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Job posts are publicly readable, but only the creator can modify or delete them.
 * - Bids are publicly readable, but only the provider can modify or delete them.
 * - Payments and Reviews are only handled via backend and not directly editable by users.
 *
 * Denormalization for Authorization:
 * - JobPost documents include a `userId` field to indicate the creator for authorization checks.
 * - Bid documents include a `providerId` field to indicate the creator for authorization checks.
 *
 * Structural Segregation:
 * - Private user data (profiles) is stored under `/users/{userId}`, ensuring clear ownership and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get, list) User with ID 'user123' can read their own profile.
     * @allow (update, delete) User with ID 'user123' can update or delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, list) User with ID 'user456' cannot read the profile of 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot update or delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Function to check if the request is made by the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the request is made by an existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to job postings.
     * @path /job_posts/{jobPostId}
     * @allow (get, list) Anyone can read or list job postings.
     * @allow (create) User with ID 'user123' can create a job posting with userId 'user123'.
     * @allow (update, delete) User with ID 'user123' can update or delete their own job posting.
     * @deny (create) User with ID 'user456' cannot create a job posting with userId 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot update or delete the job posting of 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /job_posts/{jobPostId} {
      // Function to check if the request is made by the owner of the job post
      function isJobPoster(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the request is made by an existing owner of the job post
      function isExistingJobPoster(userId) {
        return isJobPoster(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isJobPoster(request.resource.data.userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingJobPoster(resource.data.userId);
      allow delete: if isExistingJobPoster(resource.data.userId);
    }

    /**
     * @description Controls access to bids for job postings.
     * @path /job_posts/{jobPostId}/bids/{bidId}
     * @allow (get, list) Anyone can read or list bids for a job posting.
     * @allow (create) Provider 'provider789' can create a bid for job post 'job456' with providerId 'provider789'.
     * @allow (update, delete) Provider 'provider789' can update or delete their own bid for job post 'job456'.
     * @deny (create) Provider 'provider999' cannot create a bid for job post 'job456' with providerId 'provider789'.
     * @deny (update, delete) Provider 'provider999' cannot update or delete the bid of 'provider789' for job post 'job456'.
     * @principle Allows public read access but restricts write access to the owner (provider).
     */
    match /job_posts/{jobPostId}/bids/{bidId} {
      // Function to check if the request is made by the owner of the bid
      function isBidder(providerId) {
        return request.auth.uid == providerId;
      }

      // Function to check if the request is made by an existing owner of the bid
      function isExistingBidder(providerId) {
        return isBidder(providerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isBidder(request.resource.data.providerId) && request.resource.data.providerId == request.auth.uid;
      allow update: if isExistingBidder(resource.data.providerId);
      allow delete: if isExistingBidder(resource.data.providerId);
    }

    /**
     * @description Controls access to payment transactions. Assumes payments are handled via backend.
     * @path /payments/{paymentId}
     * @deny (create, update, delete) No direct client-side creation, update, or deletion of payments.
     * @allow (get, list) Payments can be read.
     * @principle Restricts all write operations to backend functions only.
     */
    match /payments/{paymentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to reviews. Assumes reviews are handled via backend.
     * @path /reviews/{reviewId}
     * @deny (create, update, delete) No direct client-side creation, update, or deletion of reviews.
     * @allow (get, list) Reviews can be read.
     * @principle Restricts all write operations to backend functions only.
     */
    match /reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}