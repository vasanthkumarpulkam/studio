
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the HandyConnect platform, either a customer or a service provider.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "userType": {
          "type": "string",
          "description": "The type of user: 'customer' or 'provider'.",
          "format": "string"
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "location": {
          "type": "string",
          "description": "User's geographical location represented as coordinates, address, or geohash."
        },
        "kycVerified": {
          "type": "boolean",
          "description": "Indicates whether the user has been KYC verified."
        }
      },
      "required": [
        "id",
        "userType",
        "firstName",
        "lastName",
        "email",
        "phoneNumber",
        "location",
        "kycVerified"
      ]
    },
    "JobPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "JobPost",
      "type": "object",
      "description": "Represents a job posting created by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the JobPost entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N JobPost)"
        },
        "category": {
          "type": "string",
          "description": "Category of the job (e.g., plumbing, grass cutting)."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the job."
        },
        "photoUrls": {
          "type": "array",
          "description": "URLs of the photos uploaded for the job.",
          "items": {
            "type": "string"
          }
        },
        "location": {
          "type": "string",
          "description": "Location where the job needs to be performed (coordinates, address, or geohash)."
        },
        "status": {
          "type": "string",
          "description": "Status of the job post (e.g., open, in progress, completed)."
        },
        "postedDate": {
          "type": "string",
          "description": "Date and time when the job was posted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "category",
        "description",
        "photoUrls",
        "location",
        "status",
        "postedDate"
      ]
    },
    "Bid": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bid",
      "type": "object",
      "description": "Represents a bid submitted by a provider for a job post.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Bid entity."
        },
        "jobPostId": {
          "type": "string",
          "description": "Reference to JobPost. (Relationship: JobPost 1:N Bid)"
        },
        "providerId": {
          "type": "string",
          "description": "Reference to User (Provider). (Relationship: User 1:N Bid)"
        },
        "price": {
          "type": "number",
          "description": "The price offered in the bid."
        },
        "submissionDate": {
          "type": "string",
          "description": "Date and time when the bid was submitted.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the bid (e.g., pending, accepted, rejected)."
        }
      },
      "required": [
        "id",
        "jobPostId",
        "providerId",
        "price",
        "submissionDate",
        "status"
      ]
    },
    "Payment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Payment",
      "type": "object",
      "description": "Represents a payment transaction processed through the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Payment entity."
        },
        "jobPostId": {
          "type": "string",
          "description": "Reference to JobPost. (Relationship: JobPost 1:1 Payment)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User (Customer). (Relationship: User 1:1 Payment)"
        },
        "providerId": {
          "type": "string",
          "description": "Reference to User (Provider). (Relationship: User 1:1 Payment)"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the payment."
        },
        "paymentDate": {
          "type": "string",
          "description": "Date and time when the payment was processed.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the payment (e.g., pending, completed, refunded)."
        },
        "transactionId": {
          "type": "string",
          "description": "Transaction ID from the payment gateway (Stripe/PayPal)."
        }
      },
      "required": [
        "id",
        "jobPostId",
        "userId",
        "providerId",
        "amount",
        "paymentDate",
        "status",
        "transactionId"
      ]
    },
    "Review": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Review",
      "type": "object",
      "description": "Represents a review and rating given by a user or provider after a job is completed.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Review entity."
        },
        "jobPostId": {
          "type": "string",
          "description": "Reference to JobPost. (Relationship: JobPost 1:N Review)"
        },
        "reviewerId": {
          "type": "string",
          "description": "Reference to User (Reviewer). (Relationship: User 1:N Review)"
        },
        "revieweeId": {
          "type": "string",
          "description": "Reference to User (Reviewee). (Relationship: User 1:N Review)"
        },
        "rating": {
          "type": "number",
          "description": "The rating given in the review (e.g., 1-5 stars)."
        },
        "comment": {
          "type": "string",
          "description": "Optional comment accompanying the rating."
        },
        "reviewDate": {
          "type": "string",
          "description": "Date and time when the review was submitted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "jobPostId",
        "reviewerId",
        "revieweeId",
        "rating",
        "reviewDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  Path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/job_posts/{jobPostId}",
        "definition": {
          "entityName": "JobPost",
          "schema": {
            "$ref": "#/backend/entities/JobPost"
          },
          "description": "Stores job postings. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "jobPostId",
              "description": "The unique identifier for the job post."
            }
          ]
        }
      },
      {
        "path": "/job_posts/{jobPostId}/bids/{bidId}",
        "definition": {
          "entityName": "Bid",
          "schema": {
            "$ref": "#/backend/entities/Bid"
          },
          "description": "Stores bids for job posts. Includes denormalized 'providerId' for authorization independence.",
          "params": [
            {
              "name": "jobPostId",
              "description": "The unique identifier for the job post."
            },
            {
              "name": "bidId",
              "description": "The unique identifier for the bid."
            }
          ]
        }
      },
      {
        "path": "/payments/{paymentId}",
        "definition": {
          "entityName": "Payment",
          "schema": {
            "$ref": "#/backend/entities/Payment"
          },
          "description": "Stores payment transactions.",
          "params": [
            {
              "name": "paymentId",
              "description": "The unique identifier for the payment."
            }
          ]
        }
      },
      {
        "path": "/reviews/{reviewId}",
        "definition": {
          "entityName": "Review",
          "schema": {
            "$ref": "#/backend/entities/Review"
          },
          "description": "Stores reviews. Includes 'jobPostId', 'reviewerId' and 'revieweeId'.",
          "params": [
            {
              "name": "reviewId",
              "description": "The unique identifier for the review."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and easily maintainable backend for the HandyConnect application, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It leverages denormalization to avoid complex security rules and ensure atomic operations.  User data is stored in `/users/{userId}`. Job posts are stored in `/job_posts/{jobPostId}`, with a denormalized `userId` to associate the post with its creator for simplified querying and security. Bids are stored in `/job_posts/{jobPostId}/bids/{bidId}`, and include a denormalized `providerId` for direct association. Payments are stored in `/payments/{paymentId}`. Reviews are stored in `/reviews/{reviewId}`, which includes the `jobPostId`, `reviewerId` and `revieweeId`. To support the QAPs, job posts and bids are secured using path-based rules. The data structure avoids hierarchical authorization dependencies by denormalizing authorization-related data, such as ownership, directly into child documents. This approach ensures that authorization checks can be performed efficiently without requiring costly `get()` operations in the security rules."
  }
}
